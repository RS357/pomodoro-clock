{"version":3,"sources":["logo.svg","PlayPauseButton/PlayPauseButton.js","TimeAdjuster/TimeAdjuster.js","Timer/Timer.js","ResetButton/ResetButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PlayPauseButton","_ref","countDown","react_default","a","createElement","onClick","className","index_es","icon","faPlay","faPause","timeDisplay","seconds","Math","floor","TimeAdjuster","time","downArrowClick","upArrowClick","timeAdjusterName","faArrowUp","faArrowDown","returnedMinutes","returnedSeconds","toString","length","concat","Timer","timeLeft","workTimer","timeAdjusterWorkTime","ResetButton","resetTimer","type","faSync","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","prevProps","prevState","iterationCount","state","console","log","timerEngine","timerState","beginCountDown","setState","clearInterval","timerID","setInterval","switchControl","decrementSeconds","timeAdjusterBreakTime","workTimeUpArrowClick","workTimeDownArrowClick","restTimeUpArrowClick","restTimeDownArrowClick","src_TimeAdjuster_TimeAdjuster","src_Timer_Timer","src_PlayPauseButton_PlayPauseButton","src_ResetButton_ResetButton","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f9090da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'; \nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faPause } from '@fortawesome/free-solid-svg-icons';\nimport './PlayPauseButton.css'\n\n\nfunction PlayPauseButton ({countDown}) {\n    return (\n        <button onClick={countDown} className='playPauseButton'><FontAwesomeIcon icon={faPlay} /><FontAwesomeIcon icon={faPause} /></button>  \n    )\n}\n\nexport default PlayPauseButton ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport './TimeAdjuster.css'\n\nlet timeDisplay = ( seconds ) => {\n    let returnedMinutes = Math.floor(seconds / 60)\n    return returnedMinutes\n}\n\nfunction TimeAdjuster({time, downArrowClick, upArrowClick, timeAdjusterName}) {\n    return (\n        <div className='timeContainer'>\n            <span className='header'>{timeAdjusterName}</span>\n            <br />\n            <span onClick={upArrowClick} className='arrowUp'><FontAwesomeIcon icon={faArrowUp}/></span>\n            <span className='time'>{timeDisplay(time)}</span>\n            <span onClick={downArrowClick} className='arrowDown'><FontAwesomeIcon  icon={faArrowDown} /></span>\n        </div>\n    )\n}\n\nTimeAdjuster.propTypes = {\n    time: PropTypes.number.isRequired,\n    timeAdjusterName: PropTypes.string.isRequired\n};\n\nexport default TimeAdjuster","import React from 'react'; \nimport './Timer.css';\n\nlet timeDisplay = ( seconds ) => {\n        let returnedMinutes = Math.floor(seconds / 60)\n        let returnedSeconds = Math.floor(seconds % 60)\n\n        if ( returnedMinutes.toString().length < 2) {\n            returnedMinutes = `0${returnedMinutes}`\n        }\n\n        if (returnedSeconds.toString().length < 2){\n            returnedSeconds = `0${returnedSeconds}` \n        }\n\n        return `${returnedMinutes}:${returnedSeconds}`\n}\n\n    \n\n\nfunction Timer({timeLeft, workTimer, timeAdjusterWorkTime}) {\n        return (\n            <div className='timerContainer'>\n                <span className='titleSession'>Session</span>\n                <span className='timeDisplay'>{workTimer === ''? timeDisplay(timeAdjusterWorkTime): timeDisplay(timeLeft)}</span>\n            </div>\n        )  \n    }\n\n\nexport default Timer; ","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSync } from '@fortawesome/free-solid-svg-icons';\nimport './ResetButton.css';\n\nconst ResetButton = ({ resetTimer }) => {\n    return(\n        <button className='resetButton' type='button' onClick={ resetTimer } ><FontAwesomeIcon icon={ faSync } /></button>\n    )\n}\n\nexport default ResetButton","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport PlayPauseButton from './PlayPauseButton/PlayPauseButton.js';\nimport TimeAdjuster from './TimeAdjuster/TimeAdjuster.js';\nimport Timer from './Timer/Timer.js';\nimport ResetButton from './ResetButton/ResetButton.js';\n\nclass App extends React.Component {\n  constructor (props){\n    super(props);\n    this.state = {\n      timeAdjusterWorkTime: 1500,\n      timeAdjusterBreakTime: 300,\n      timeLeft: 0,\n      timerState: 'stopped',\n      workTimer: '', \n      iterationCount: 0,\n    }\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (prevState.iterationCount !== this.state.iterationCount){\n      console.log(`iterationCount is now ${this.state.iterationCount}`)\n    }\n  }\n  \n  timerEngine = () => {\n    if ( this.state.timerState === 'stopped' ) {\n      this.beginCountDown() \n      this.setState({timerState: 'running'})\n    } else {\n        this.setState({ timerState: 'stopped'})\n        clearInterval(this.timerID)\n    }\n  }\n\n  beginCountDown = () => this.timerID = setInterval( () => { this.switchControl(); this.decrementSeconds()  } , 1000 )\n  \n  decrementSeconds = () => this.setState( (state) => ({ timeLeft: state.timeLeft - 1 }))\n\n  switchControl = () => {\n    let timeLeft = this.state.timeLeft; \n    let iterationCount = this.state.iterationCount\n    console.log(this.state.timerState)\n    \n    if( timeLeft === 0 && iterationCount <= 3 ) { \n      \n      if( this.state.workTimer === 'session' ) {\n          this.setState( (state) => ({  \n            workTimer: 'break',  \n            timeLeft: state.timeAdjusterBreakTime,\n            iterationCount: state.iterationCount + 1,\n          }), console.log('break has started'))\n      \n        } else {\n            this.setState( (state) => ({  \n              workTimer: 'session',  \n              timeLeft: state.timeAdjusterWorkTime,  \n            }), console.log('session has started'))\n          }   \n    \n      } else if (iterationCount === 3 ) {\n          this.setState({timerState: 'stopped'})\n          clearInterval(this.timerID)\n    }\n  }\n  \n  resetTimer = () => {\n    clearInterval(this.timerID);\n    this.setState({\n      timeLeft: 0,\n      timeAdjusterWorkTime: 1500,\n      timeAdjusterBreakTime: 300,\n      timerState: 'stopped',\n      workTimer: '',\n      iterationCount: 0\n    });\n  }\n\n  workTimeUpArrowClick = () => { \n    if ( this.state.timeAdjusterWorkTime < 5940) {\n      this.setState( (state) => ({\n        timeAdjusterWorkTime: state.timeAdjusterWorkTime + 60,\n      }));\n    }\n  }\n  \n  workTimeDownArrowClick = () => {\n    if( this.state.timeAdjusterWorkTime >= 60 ){\n      this.setState( (state) => ({\n        timeAdjusterWorkTime: state.timeAdjusterWorkTime - 60\n      }));\n    }\n  }\n   \n  restTimeUpArrowClick = () => { \n    if( this.state.timeAdjusterBreakTime < 5940){\n      this.setState( (state) => ({\n        timeAdjusterBreakTime: state.timeAdjusterBreakTime  + 60,\n      }));\n    }\n  }\n\n  restTimeDownArrowClick = () => {   \n    if( this.state.timeAdjusterBreakTime >= 60 ){  \n      this.setState( (state) => ({\n        timeAdjusterBreakTime: state.timeAdjusterBreakTime - 60\n      }))\n    }   \n  }\n\n  render() {\n    return ( \n      <div className='pomodoro' >\n        <h1 className='title'>Pomodoro Clock</h1>\n\n        <div className='timeAdjusterContainer'>\n          <TimeAdjuster \n            timeAdjusterName='Break Length' \n            downArrowClick={this.restTimeDownArrowClick} \n            upArrowClick={this.restTimeUpArrowClick} \n            time={this.state.timeAdjusterBreakTime} \n          />\n          <TimeAdjuster \n            timeAdjusterName='Session Length' \n            downArrowClick={this.workTimeDownArrowClick} \n            upArrowClick={this.workTimeUpArrowClick} \n            time={this.state.timeAdjusterWorkTime} \n          />\n        </div>\n\n        <div className='timerAndButtons'>\n          <Timer \n            workTimer={this.state.workTimer}\n            timeLeft={this.state.timeLeft}\n            timeAdjusterWorkTime={this.state.timeAdjusterWorkTime}\n          />\n          <PlayPauseButton \n            countDown={this.timerEngine} \n          /> \n          <ResetButton\n            resetTimer={this.resetTimer}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}